package chatsocket;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

/**
 * @author edilson-silva
 */
public class ServerChat extends javax.swing.JFrame {

    static ServerSocket serverSocket;
    static Socket clientSocket;
    static DataInputStream messageInput;
    static DataOutputStream messageOutput;
    
    public ServerChat() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MessagesDisplayScrollPanelServer = new javax.swing.JScrollPane();
        MessagesDisplayServer = new javax.swing.JTextArea();
        MessageInputServer = new javax.swing.JTextField();
        SendButtonServer = new javax.swing.JButton();
        nameLabelServer = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 255));

        MessagesDisplayServer.setColumns(20);
        MessagesDisplayServer.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        MessagesDisplayServer.setRows(5);
        MessagesDisplayScrollPanelServer.setViewportView(MessagesDisplayServer);

        MessageInputServer.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N

        SendButtonServer.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        SendButtonServer.setText("Enviar");
        SendButtonServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendButtonServerActionPerformed(evt);
            }
        });

        nameLabelServer.setText("SERVER");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(MessageInputServer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SendButtonServer))
                    .addComponent(MessagesDisplayScrollPanelServer, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nameLabelServer)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nameLabelServer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MessagesDisplayScrollPanelServer, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(MessageInputServer)
                    .addComponent(SendButtonServer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SendButtonServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendButtonServerActionPerformed
        try {
            String messageOutData = MessageInputServer.getText().trim();
            messageOutput.writeUTF(messageOutData);
        } catch (IOException e) { }
    }//GEN-LAST:event_SendButtonServerActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerChat().setVisible(true);
            }
        });
        
        String messageInputData = "";
        
        try {
            serverSocket = new ServerSocket(5019); // Server running on port 5019.
            clientSocket = serverSocket.accept(); // Server accept client connections.
            
            messageInput = new DataInputStream(clientSocket.getInputStream());
            messageOutput = new DataOutputStream(clientSocket.getOutputStream());
            
            while (!messageInputData.equals("sair")){
                messageInputData = messageInput.readUTF();             
                MessagesDisplayServer.setText(MessagesDisplayServer.getText().trim() + "\n" + messageInputData);
            }
        } catch (IOException e) { }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextField MessageInputServer;
    private javax.swing.JScrollPane MessagesDisplayScrollPanelServer;
    private static javax.swing.JTextArea MessagesDisplayServer;
    private static javax.swing.JButton SendButtonServer;
    private javax.swing.JLabel nameLabelServer;
    // End of variables declaration//GEN-END:variables
}
